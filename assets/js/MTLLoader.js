THREE.MTLLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager},THREE.MTLLoader.prototype={constructor:THREE.MTLLoader,load:function(a,b,c,d){var e=this,f=new THREE.FileLoader(this.manager);f.setPath(this.path),f.load(a,function(a){b(e.parse(a))},c,d)},setPath:function(a){this.path=a},setTexturePath:function(a){this.texturePath=a},setBaseUrl:function(a){console.warn("THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead."),this.setTexturePath(a)},setCrossOrigin:function(a){this.crossOrigin=a},setMaterialOptions:function(a){this.materialOptions=a},parse:function(a){for(var b=a.split("\n"),c={},d=/\s+/,e={},f=0;f<b.length;f++){var g=b[f];if(g=g.trim(),0!==g.length&&"#"!==g.charAt(0)){var h=g.indexOf(" "),i=h>=0?g.substring(0,h):g;i=i.toLowerCase();var j=h>=0?g.substring(h+1):"";if(j=j.trim(),"newmtl"===i)c={name:j},e[j]=c;else if(c)if("ka"===i||"kd"===i||"ks"===i){var k=j.split(d,3);c[i]=[parseFloat(k[0]),parseFloat(k[1]),parseFloat(k[2])]}else c[i]=j}}var l=new THREE.MTLLoader.MaterialCreator(this.texturePath||this.path,this.materialOptions);return l.setCrossOrigin(this.crossOrigin),l.setManager(this.manager),l.setMaterials(e),l}},THREE.MTLLoader.MaterialCreator=function(a,b){this.baseUrl=a||"",this.options=b,this.materialsInfo={},this.materials={},this.materialsArray=[],this.nameLookup={},this.side=this.options&&this.options.side?this.options.side:THREE.FrontSide,this.wrap=this.options&&this.options.wrap?this.options.wrap:THREE.RepeatWrapping},THREE.MTLLoader.MaterialCreator.prototype={constructor:THREE.MTLLoader.MaterialCreator,crossOrigin:"Anonymous",setCrossOrigin:function(a){this.crossOrigin=a},setManager:function(a){this.manager=a},setMaterials:function(a){this.materialsInfo=this.convert(a),this.materials={},this.materialsArray=[],this.nameLookup={}},convert:function(a){if(!this.options)return a;var b={};for(var c in a){var d=a[c],e={};b[c]=e;for(var f in d){var g=!0,h=d[f],i=f.toLowerCase();switch(i){case"kd":case"ka":case"ks":this.options&&this.options.normalizeRGB&&(h=[h[0]/255,h[1]/255,h[2]/255]),this.options&&this.options.ignoreZeroRGBs&&0===h[0]&&0===h[1]&&0===h[2]&&(g=!1)}g&&(e[i]=h)}}return b},preload:function(){for(var a in this.materialsInfo)this.create(a)},getIndex:function(a){return this.nameLookup[a]},getAsArray:function(){var a=0;for(var b in this.materialsInfo)this.materialsArray[a]=this.create(b),this.nameLookup[b]=a,a++;return this.materialsArray},create:function(a){return void 0===this.materials[a]&&this.createMaterial_(a),this.materials[a]},createMaterial_:function(a){function b(a,b){return"string"!=typeof b||""===b?"":/^https?:\/\//i.test(b)?b:a+b}function c(a,c){if(!f[a]){var e=d.getTextureParams(c,f),g=d.loadTexture(b(d.baseUrl,e.url));g.repeat.copy(e.scale),g.offset.copy(e.offset),g.wrapS=d.wrap,g.wrapT=d.wrap,f[a]=g}}var d=this,e=this.materialsInfo[a],f={name:a,side:this.side};for(var g in e){var h,i=e[g];if(""!==i)switch(g.toLowerCase()){case"kd":f.color=(new THREE.Color).fromArray(i);break;case"ks":f.specular=(new THREE.Color).fromArray(i);break;case"map_kd":c("map",i);break;case"map_ks":c("specularMap",i);break;case"norm":c("normalMap",i);break;case"map_bump":case"bump":c("bumpMap",i);break;case"ns":f.shininess=parseFloat(i);break;case"d":h=parseFloat(i),h<1&&(f.opacity=h,f.transparent=!0);break;case"tr":h=parseFloat(i),h>0&&(f.opacity=1-h,f.transparent=!0)}}return this.materials[a]=new THREE.MeshPhongMaterial(f),this.materials[a]},getTextureParams:function(a,b){var c,d={scale:new THREE.Vector2(1,1),offset:new THREE.Vector2(0,0)},e=a.split(/\s+/);return c=e.indexOf("-bm"),c>=0&&(b.bumpScale=parseFloat(e[c+1]),e.splice(c,2)),c=e.indexOf("-s"),c>=0&&(d.scale.set(parseFloat(e[c+1]),parseFloat(e[c+2])),e.splice(c,4)),c=e.indexOf("-o"),c>=0&&(d.offset.set(parseFloat(e[c+1]),parseFloat(e[c+2])),e.splice(c,4)),d.url=e.join(" ").trim(),d},loadTexture:function(a,b,c,d,e){var f,g=THREE.Loader.Handlers.get(a),h=void 0!==this.manager?this.manager:THREE.DefaultLoadingManager;return null===g&&(g=new THREE.TextureLoader(h)),g.setCrossOrigin&&g.setCrossOrigin(this.crossOrigin),f=g.load(a,c,d,e),void 0!==b&&(f.mapping=b),f}};